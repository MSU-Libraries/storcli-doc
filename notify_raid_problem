#!/bin/bash
###########################################################
# Script checks StorCLI for non-optimal virtual disks and
# for physical disks that are either offline or bad
#
# On any state deviation, an email notification will be
# sent to the root user of the server.
###########################################################

# Default to controller 0
CID=${1:-0}
# Only allow controller id to be 0 through 9
if [[ ! $CID =~ ^[0-9]$ ]]; then
    echo "ERROR: Controller number out of bounds."
    exit 1
fi

# Desired states enumerated
ALLOWED_VD_STATES=(optl)
ALLOWED_PD_STATES=(onln ugood ghs dhs)
# Flag to set if problem state is found (default to false)
PROBLEM_STATE_FOUND=1

# Possible names of StorCLI binary
STORCLI_BINARIES=( "storcli64" "storcli" )
# If StorCLI binary is not found in path, try these locations also
EXTRA_SEARCH_PATHS=( "/opt/MegaRAID/storcli/" "/usr/local/sbin/" "/usr/local/bin/" )

# StorCLI path
locate_storcli() {
    for BIN in "${STORCLI_BINARIES[@]}"; do
        STORCLI=$( which $BIN )
        FOUND_SCLI=$?
        if [[ $FOUND_SCLI -ne 0 ]]; then
            for EXTRA in "${EXTRA_SEARCH_PATHS[@]}"; do
                if [[ -f "$EXTRA$BIN" && -x "$EXTRA$BIN" ]]; then
                    STORCLI="$EXTRA$BIN"
                    break 2
                fi
            done
        else
            break
        fi
    done
    echo "$STORCLI"
}

STORCLI_PATH=$( locate_storcli )
if [[ -z $STORCLI_PATH ]]; then
    echo "ERROR: Could not find StorCLI binary!"
    exit 1
fi

#############################################
# Check if array contains a given value.
# Comparison is case insensitive.
#  $1 => (string) Global name of array
#  $2 => (string) Value to match in array
# Returns 0 if match is found, 1 otherwise
array_contains_value() {
    local ARRNAME=$1[@]
    local ARR=( "${!ARRNAME}" )
    for ARVAL in "${ARR[@]}"; do
        if [[ ${ARVAL,,} == ${2,,} ]]; then
            return 0
        fi
    done
    return 1
}

# Regular Expression shorthand
RSR="[[:space:]]+"              # Regex Space Required
RSO="[[:space:]]*"              # Regex Space Optional
RGR="([[:graph:]]+)"            # Regex Graph Required

###########################################################
# Virtual Disks

# Show all virtual disks on controller
VD_COMMAND="${STORCLI_PATH} /c${CID}/vall show"
VD_OUTPUT=$( $VD_COMMAND )
VD_EXIT=$?

# Ensure command ran successfully with expected output
if [[ $VD_EXIT -ne 0 ]]; then
    echo "ERROR: Command exited with code $VD_EXIT: $VD_COMMAND"
    exit 1
fi
VD_HEADER_RE="^DG/VD${RSR}TYPE${RSR}State${RSR}Access${RSR}Consist${RSR}Cache${RSR}Cac${RSR}sCC${RSR}Size${RSR}Name${RSO}$"
VD_ENTRY_RE="^$RGR$RSR$RGR$RSR$RGR$RSR$RGR$RSR$RGR$RSR$RGR$RSR$RGR$RSR$RGR$RSR$RGR$RSR$RGR$RSO$"
VD_MATCHHEADER=1
while read -r LINE; do
    # Ensure we match the header before processing results
    if [[ $LINE =~ $VD_HEADER_RE ]]; then
        VD_MATCHHEADER=0
        continue
    fi

    # Try to parse VD from output only if the header was found
    if [[ $VD_MATCHHEADER -eq 0 && $LINE =~ $VD_HEADER_RE ]]; then
        if ! array_contains_value ALLOWED_VD_STATES ${BASH_REMATCH[3]}; then
            PROBLEM_STATE_FOUND=0
            break
        fi
    fi
done <<< "$VD_OUTPUT"
# Exit with error if no header was matched
if [[ $VD_MATCHHEADER -ne 0 ]]; then
    echo "ERROR: Command did not output a valid header: $VD_COMMAND"
    exit 1
fi

###########################################################
# Physical Disks

# Show all physical disks on controller
PD_OUTPUT=$( ${STORCLI_PATH} /c${CID}/eall/sall show )
PD_EXIT=$?

# Ensure command ran successfully with expected output
# TODO match list header

# Parse line to match PD
# TODO

# EID:Slt DID State DG     Size Intf Med SED PI SeSz Model                Sp Type
# 4:0       6 Onln   0 931.0 GB SATA HDD N   N  512B ST1000NM0033-9ZM173  U  -
# 4:1       7 Onln   0 931.0 GB SATA HDD N   N  512B ST1000NM0033-9ZM173  U  -
# 4:2      32 Onln   1 9.094 TB SATA HDD N   N  512B ST10000VN0004-1ZD101 U  -
# 5:10     20 Onln   3 9.094 TB SATA HDD N   N  512B ST10000VN0004-1ZD101 U  -
# 5:11     28 GHS    - 9.094 TB SATA HDD N   N  512B ST10000VN0004-1ZD101 D  -
# D-Enclosure Device ID|Slt-Slot No.|DID-Device ID|DG-DriveGroup
# DHS-Dedicated Hot Spare|UGood-Unconfigured Good|GHS-Global Hotspare
# UBad-Unconfigured Bad|Onln-Online|Offln-Offline|Intf-Interface
# Med-Media Type|SED-Self Encryptive Drive|PI-Protection Info
# SeSz-Sector Size|Sp-Spun|U-Up|D-Down|T-Transition|F-Foreign
# UGUnsp-Unsupported|UGShld-UnConfigured shielded|HSPShld-Hotspare shielded
# CFShld-Configured shielded|Cpybck-CopyBack|CBShld-Copyback Shielded

###########################################################
# Send Notification (if problem state found)

#TODO

